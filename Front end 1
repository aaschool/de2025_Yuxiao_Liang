// Add these variables at the top
let apiEndpoint = 'APP_SCRIPT_URL'; // Could be Google Apps Script URL
let currentScenario = '';
let lastUpdateTime = 0;

// Modify the saveSelections function to save to backend
function saveSelections() {
  let selections = {};
  let allSelected = true;
  
  for (let i = 0; i < situations.length; i++) {
    let color = colorDropdowns[i].value();
    if (color === 'Select Color') {
      allSelected = false;
    }
    selections[situations[i]] = color;
  }
  
  if (!allSelected) {
    savedMessage = ' Please select colors for all situations';
  } else {
    saveButton.html('Saving...'); // Update button text
    saveButton.attribute('disabled', true); // Disable button

    fetch(apiEndpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ selections: selections })
    })
    .then(response => response.json())
    .then(data => {
      console.log("Server response:", data);
      savedMessage = ' Color selections saved!';
      saveButton.html('Saved '); // Update button text
    })
    .catch(error => {
      savedMessage = ' Error saving selections';
      console.error("Fetch error:", error);
    })
    .finally(() => {
      setTimeout(() => {
        saveButton.html('Save'); // Restore button text
        saveButton.removeAttribute('disabled'); // Enable button
      }, 2000);
    });
  }
}

let situations = ['Intense', 'Mournful', 'Balanced', 'Disordered'];
let colors = ['Blue', 'Yellow', 'Red', 'Green'];
let colorDropdowns = [];
let saveButton;
let savedMessage = '';
let messageTimer = 0;

function setup() {
  let phoneWidth = 71.6 * 3;
  let phoneHeight = 147.6 * 3;
  createCanvas(phoneWidth, phoneHeight);
  
  textAlign(CENTER);
  textSize(16);

  for (let i = 0; i < situations.length; i++) {
    let dropdown = createSelect();
    let yPosition = height / 4 + (i * 60);

    dropdown.position(width / 2 - 15, yPosition + 3);
    dropdown.option('Select Color');
    for (let color of colors) {
      dropdown.option(color);
    }

    colorDropdowns.push(dropdown);
  }

  saveButton = createButton('Save');
  saveButton.position(width / 2 - 30, height - height / 5);
  saveButton.mousePressed(saveSelections);

  fetchPreviousSelections(); // Load from backend
  loadFromLocalStorage(); // Load from local storage
}

function loadFromLocalStorage() {
  let savedSelections = localStorage.getItem('colorSelections');
  if (savedSelections) {
    let selections = JSON.parse(savedSelections);
    for (let i = 0; i < situations.length; i++) {
      if (selections[situations[i]]) {
        colorDropdowns[i].selected(selections[situations[i]]);
      }
    }
  }
}



function fetchPreviousSelections() {
  function fetchScenario() {
    fetch(apiEndpoint)
      .then(response => response.json())
      .then(data => {
        if (data && data.scenario && data.color) {
          console.log("Fetched scenario:", data.scenario, "Color:", data.color);
        }
      })
      .catch(error => {
        console.error("Error fetching selections:", error);
      });
  }

  fetchScenario(); // Fetch once immediately
  setInterval(fetchScenario, 30000); // Refresh every 30s
}

function draw() {
  background(255);
  
  // Draw phone frame
  stroke(200);
  strokeWeight(2);
  noFill();
  rect(0, 0, width, height, 20);
  
  // Welcome text
  fill(50);
  noStroke();
  textSize(16); 
  textAlign (CENTER)// Set font size for welcome text
  text('Yuxiao, welcome back!!', width/2, height/6);
  
  // Draw situation labels with new font size
  textSize(12);  // Set desired font size for situation labels
  fill(0);  // Ensure text is visible
  for (let i = 0; i < situations.length; i++) {
    let yPosition = height/4 + (i * 60);
    textAlign(LEFT);
    text(situations[i], width/2 - 80, yPosition + 15);
  }
  
  // Display save message if there is one
  textSize(12);  // Reset font size for save message
  if (savedMessage && messageTimer > 0) {
    textAlign(CENTER);
    fill(70, 136, 71);
    text(savedMessage, width/2, height - height/4 + 40);
    messageTimer--;
  }
}

function saveSelections() {
  let selections = {};
  let allSelected = true;

  // Gather user selections
  for (let i = 0; i < situations.length; i++) {
    let color = colorDropdowns[i].value();
    if (color === 'Select Color') {
      allSelected = false;
    }
    selections[situations[i]] = color;
  }

  if (!allSelected) {
    savedMessage = 'Please select colors for all situations';
  } else {
    // Save to backend (Google Apps Script)
    fetch(apiEndpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(selections),
    })
    .then(response => response.json())
    .then(data => {
      savedMessage = 'Color selections saved!';
      localStorage.setItem('colorSelections', JSON.stringify(selections));
    })
    .catch(error => {
      savedMessage = 'Error saving selections';
      console.error('Error:', error);
    });
  }

  messageTimer = 90;
}

function loadPreviousSelections() {
  let savedSelections = localStorage.getItem('colorSelections');
  if (savedSelections) {
    let selections = JSON.parse(savedSelections);
    for (let i = 0; i < situations.length; i++) {
      if (selections[situations[i]]) {
        colorDropdowns[i].selected(selections[situations[i]]);
      }
    }
  }
}
